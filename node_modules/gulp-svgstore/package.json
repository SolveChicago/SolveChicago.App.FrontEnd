{
  "name": "gulp-svgstore",
  "version": "6.0.0",
  "description": "Combine svg files into one with <symbol> elements",
  "main": "index.js",
  "files": [
    "index.js"
  ],
  "scripts": {
    "test": "gulp build && mocha test.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/w0rm/gulp-svgstore"
  },
  "author": {
    "name": "Andrey Kuzmin",
    "email": "unsoundscapes@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/w0rm/gulp-svgstore/issues"
  },
  "homepage": "https://github.com/w0rm/gulp-svgstore",
  "dependencies": {
    "cheerio": "0.*",
    "gulp-util": "^3.0.0"
  },
  "devDependencies": {
    "finalhandler": "^0.4.0",
    "gulp": "^3.6.2",
    "gulp-inject": "^1.0.1",
    "mocha": "^2.3.2",
    "serve-static": "^1.9.3",
    "sinon": "^1.16.1",
    "wd": "^0.3.4"
  },
  "keywords": [
    "gulpplugin",
    "svg",
    "icon",
    "sprite"
  ],
  "readme": "gulp-svgstore [![Build Status](https://api.travis-ci.org/w0rm/gulp-svgstore.svg)](https://travis-ci.org/w0rm/gulp-svgstore)\n=============\n\n<img align=\"right\" width=\"130\" height=\"175\"\n     title=\"SVG Superman\"\n     src=\"https://github.com/w0rm/gulp-svgstore/blob/master/svg-superman.png\">\n\nCombine svg files into one with `<symbol>` elements.  \nRead more about this in [CSS Tricks article](http://css-tricks.com/svg-symbol-good-choice-icons/).\n\nIf you need similar plugin for grunt,  \nI encourage you to check [grunt-svgstore](https://github.com/FWeinb/grunt-svgstore).\n\n### Options:\n\nThe following options are set automatically based on file data:\n\n* `id` attribute of the `<symbol>` element is set to the name of corresponding file;\n* result filename is the name of base directory of the first file.\n\nIf your workflow is different, please use `gulp-rename` to rename sources or result.\n\nThe only available option is:\n\n* inlineSvg â€” output only `<svg>` element without `<?xml ?>` and `DOCTYPE` to use inline, default: `false`.\n\n## Usage\n\nThe following script will combine all svg sources into single svg file with `<symbol>` elements.\nThe name of result svg is the base directory name of the first file `src.svg`.\n\nAdditionally pass through [gulp-svgmin](https://github.com/ben-eb/gulp-svgmin)\nto minify svg and ensure unique ids.\n\n```js\nvar gulp = require('gulp');\nvar svgstore = require('gulp-svgstore');\nvar svgmin = require('gulp-svgmin');\nvar path = require('path');\n\ngulp.task('svgstore', function () {\n    return gulp\n        .src('test/src/*.svg')\n        .pipe(svgmin(function (file) {\n            var prefix = path.basename(file.relative, path.extname(file.relative));\n            return {\n                plugins: [{\n                    cleanupIDs: {\n                        prefix: prefix + '-',\n                        minify: true\n                    }\n                }]\n            }\n        }))\n        .pipe(svgstore())\n        .pipe(gulp.dest('test/dest'));\n});\n```\n\n### Inlining svgstore result into html body\n\nTo inline combined svg into html body I suggest using [gulp-inject](https://github.com/klei/gulp-inject).\nThe following gulp task will inject svg into\n\nIn your html file:\n\n```html\n<div style=\"height: 0; width: 0; position: absolute; visibility: hidden\">\n  <!-- inject:svg --><!-- endinject -->\n</div>\n```\nIn your gulp tasks:\n\n```js\nvar gulp = require('gulp');\nvar svgstore = require('gulp-svgstore');\nvar inject = require('gulp-inject');\n\ngulp.task('svgstore', function () {\n    var svgs = gulp\n        .src('test/src/*.svg')\n        .pipe(svgstore({ inlineSvg: true }));\n\n    function fileContents (filePath, file) {\n        return file.contents.toString();\n    }\n\n    return gulp\n        .src('test/src/inline-svg.html')\n        .pipe(inject(svgs, { transform: fileContents }))\n        .pipe(gulp.dest('test/dest'));\n});\n```\n\n### Generating id attributes\n\nId of symbol element is calculated from file name. You cannot pass files with the same name,\nbecause id should be unique.\n\nIf you need to add prefix to each id, please use `gulp-rename`:\n\n```js\nvar gulp = require('gulp');\nvar rename = require('gulp-rename');\nvar svgstore = require('gulp-svgstore');\n\ngulp.task('default', function () {\n    return gulp\n        .src('src/svg/**/*.svg', { base: 'src/svg' })\n        .pipe(rename({prefix: 'icon-'}))\n        .pipe(svgstore())\n        .pipe(gulp.dest('dest'));\n});\n```\n\nIf you need to have nested directories that may have files with the same name, please\nuse `gulp-rename`. The following example will concatenate relative path with the name of the file,\ne.g. `src/svg/one/two/three/circle.svg` becomes `one-two-three-circle`.\n\n\n```js\nvar gulp = require('gulp');\nvar rename = require('gulp-rename');\nvar svgstore = require('gulp-svgstore');\n\ngulp.task('default', function () {\n    return gulp\n        .src('src/svg/**/*.svg', { base: 'src/svg' })\n        .pipe(rename(function (path) {\n            var name = path.dirname.split(path.sep);\n            name.push(path.basename);\n            path.basename = name.join('-');\n        }))\n        .pipe(svgstore())\n        .pipe(gulp.dest('dest'));\n});\n```\n\n### Using svg as external file\n\nThere is a problem with `<use xlink:href=\"external.svg#icon-name\">` in Internet Explorer,\nso you should either inline everything into body with a\n[simple script like this](https://gist.github.com/w0rm/621a56a353f7b2a6b0db) or\npolyfill with [svg4everybody](https://github.com/jonathantneal/svg4everybody).\n\n## PNG sprite fallback for unsupported browsers\n\n[gulp-svgfallback](https://github.com/w0rm/gulp-svgfallback) is a gulp plugin that generates png\nsprite and css file with background offsets from svg sources. Please check it and leave feedback.\n\n## Transform svg sources or combined svg\n\nTo transform either svg sources or combined svg you may pipe your files through\n[gulp-cheerio](https://github.com/KenPowers/gulp-cheerio).\n\n### Transform svg sources\n\nAn example below removes all fill attributes from svg sources before combining them.\nPlease note that you have to set `xmlMode: true` to parse svgs as xml file.\n\n```js\nvar gulp = require('gulp');\nvar svgstore = require('gulp-svgstore');\nvar cheerio = require('gulp-cheerio');\n\ngulp.task('svgstore', function () {\n    return gulp\n        .src('test/src/*.svg')\n        .pipe(cheerio({\n            run: function ($) {\n                $('[fill]').removeAttr('fill');\n            },\n            parserOptions: { xmlMode: true }\n        }))\n        .pipe(svgstore({ inlineSvg: true })\n        .pipe(gulp.dest('test/dest'));\n});\n```\n\n### Transform combined svg\n\nThe following example sets `style=\"display:none\"` on the combined svg:\n(beware if you use gradients and masks, display:none breaks those and just show\nnothing, best method is to use the [method show above](#inlining-svgstore-result-into-html-body) )\n\n\n```js\nvar gulp = require('gulp');\nvar svgstore = require('gulp-svgstore');\nvar cheerio = require('gulp-cheerio');\n\ngulp.task('svgstore', function () {\n    return gulp\n        .src('test/src/*.svg')\n        .pipe(svgstore({ inlineSvg: true }))\n        .pipe(cheerio({\n            run: function ($) {\n                $('svg').attr('style',  'display:none');\n            },\n            parserOptions: { xmlMode: true }\n        }))\n        .pipe(gulp.dest('test/dest'));\n});\n```\n\n## Extracting metadata from combined svg\n\nYou can extract data with cheerio.\n\nThe following example extracts viewBox and id from each symbol in combined svg.\n\n```js\nvar gulp = require('gulp');\nvar gutil = require('gulp-util');\nvar svgstore = require('gulp-svgstore');\nvar through2 = require('through2');\nvar cheerio = require('cheerio');\n\ngulp.task('metadata', function () {\n    return gulp\n        .src('test/src/*.svg')\n        .pipe(svgstore())\n        .pipe(through2.obj(function (file, encoding, cb) {\n            var $ = cheerio.load(file.contents.toString(), {xmlMode: true});\n            var data = $('svg > symbol').map(function () {\n                return {\n                    name: $(this).attr('id'),\n                    viewBox: $(this).attr('viewBox')\n                };\n            }).get();\n            var jsonFile = new gutil.File({\n                path: 'metadata.json',\n                contents: new Buffer(JSON.stringify(data))\n            });\n            this.push(jsonFile);\n            this.push(file);\n            cb();\n        }))\n        .pipe(gulp.dest('test/dest'));\n});\n```\n\n## Possible rendering issues with Clipping Paths in SVG\n\nIf you're running into issues with SVGs not rendering correctly in some browsers (see issue #47), the issue might be that clipping paths might not have been properly intersected in the SVG file. There are currently two ways of fixing this issue:\n\n### Correcting the Clipping Path in the SVG\n\nIf you have the source file, simply converting the clipping path to a nice coded shape will fix this issue. Select the object, open up the Pathfinder panel, and click the Intersect icon.\n\n### Editing the SVG Code\n\nIf you don't have the source file or an SVG Editor (Adobe Illustrator etc.), you can manually edit the SVG code in the file. Wrapping the `<clipPath>` into a `<defs>` will fix this issue. Here's an example:\n\n```\n<defs>\n    <path d=\"M28.4 30.5l5.3 5c0-.1 7-6.9 7-6.9l-4-6.8-8.3 8.7z\" id=\"a\"/>\n</defs>\n<clipPath id=\"b\"><use overflow=\"visible\" xlink:href=\"#a\"/></clipPath>\n```\n\nBecomes:\n\n```\n<defs>\n    <path d=\"M28.4 30.5l5.3 5c0-.1 7-6.9 7-6.9l-4-6.8-8.3 8.7z\" id=\"a\"/>\n    <clipPath id=\"b\"><use overflow=\"visible\" xlink:href=\"#a\"/></clipPath>\n</defs>\n```\n\nOr you can go further and reduce the size by removing the `<use>` element, like this:\n\n```\n<defs>\n    <clipPath id=\"b\"><path d=\"M28.4 30.5l5.3 5c0-.1 7-6.9 7-6.9l-4-6.8-8.3 8.7z\"/></clipPath>\n</defs>\n```\n\n## Changelog\n\n* 6.0.0\n  * Removed cache of the cheerio object #61\n\n* 5.0.5\n  * Correctly set namespaces of the combined svg\n\n* 5.0.4\n  * Skip null and invalid files\n\n* 5.0.3\n  * Updated readme with a way to ensure unique ids\n\n* 5.0.2\n  * Updated direct dependencies\n\n* 5.0.1\n  * Removed cheerio from devDependencies #34\n\n* 5.0.0\n  * Removed prefix and fileName options\n\n* 4.0.3\n  * Ensure unique file names\n  * Improved readme with gulp-rename usage to generate id for nested directories\n\n* 4.0.1\n  * Added cheerio to devDependencies\n\n* 4.0.0\n  * Removed `transformSvg`, pipe files through [gulp-cheerio](https://github.com/KenPowers/gulp-cheerio) instead.\n  * Made cheerio 0.* a peer dependency, allows to choose what version to use.\n  * Uses `file.cheerio` if cached in gulp file object and also sets it for the combined svg.\n  * Improved readme.\n\n* 3.0.0\n  * Used cheerio instead of libxmljs (changes transformSvg syntax)\n\n* 2.0.0\n  * Added check for inputs before generating SVG.\n\n* 1.0.1\n  * Added check for missing viewBox in original svg.\n\n* 1.0.0\n  * Initial release.\n",
  "readmeFilename": "README.md",
  "_id": "gulp-svgstore@6.0.0",
  "dist": {
    "shasum": "0507645b2fd3b84f4d27f7c8a5f74e650bf9907d"
  },
  "_from": "gulp-svgstore@6.0.0",
  "_resolved": "https://registry.npmjs.org/gulp-svgstore/-/gulp-svgstore-6.0.0.tgz"
}
