{
  "name": "gulp-cond",
  "description": "Ternary operator for Gulp.",
  "version": "1.0.0",
  "homepage": "https://github.com/nfroidure/gulp-cond",
  "author": {
    "name": "Nicolas Froidure",
    "url": "http://www.insertafter.com/blog.html"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/nfroidure/gulp-cond.git"
  },
  "bugs": {
    "url": "https://github.com/nfroidure/gulp-cond/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/nfroidure/gulp-cond/blob/master/LICENSE"
    }
  ],
  "main": "src/index.js",
  "engines": {
    "node": ">= 0.10.0"
  },
  "scripts": {
    "test": "node_modules/.bin/mocha tests/*.mocha.js",
    "coveralls": "./node_modules/istanbul/lib/cli.js cover ./node_modules/mocha/bin/_mocha --report lcovonly -- tests/*.mocha.js -R spec -t 5000 && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage",
    "cover": "./node_modules/istanbul/lib/cli.js cover --report html ./node_modules/mocha/bin/_mocha -- tests/*.mocha.js -R spec -t 5000"
  },
  "keywords": [
    "gulpplugin",
    "gulp",
    "gulp-plugin",
    "condition",
    "operator",
    "ternary"
  ],
  "devDependencies": {
    "coveralls": "^2.11.2",
    "istanbul": "^0.3.16",
    "mocha": "^2.2.5",
    "mocha-lcov-reporter": "0.0.2",
    "streamtest": "^1.2.1",
    "vinyl": "^0.5.0"
  },
  "dependencies": {
    "readable-stream": "^2.0.1"
  },
  "readme": "# gulp-cond\n> A ternary operator for [Gulp](http://gulpjs.com/).\n\n[![NPM version](https://badge.fury.io/js/gulp-cond.svg)](https://npmjs.org/package/gulp-cond)\n[![Build status](https://secure.travis-ci.org/nfroidure/gulp-cond.svg)](https://travis-ci.org/nfroidure/gulp-cond)\n[![Dependency Status](https://david-dm.org/nfroidure/gulp-cond.svg)](https://david-dm.org/nfroidure/gulp-cond)\n[![devDependency Status](https://david-dm.org/nfroidure/gulp-cond/dev-status.svg)](https://david-dm.org/nfroidure/gulp-cond#info=devDependencies)\n[![Coverage Status](https://coveralls.io/repos/nfroidure/gulp-cond/badge.svg?branch=master)](https://coveralls.io/r/nfroidure/gulp-cond?branch=master)\n\n## Usage\n\nFirst, install `gulp-cond` as a development dependency:\n\n```shell\nnpm install --save-dev gulp-cond\n```\n\nThen, use it to conditionnaly pipe plugins in your `gulpfile.js`:\n\n```js\nvar cond = require('gulp-cond');\nvar prod = gulp.env.prod;\n\n// Images\ngulp.task('build_images', function() {\n  gulp.src('assets/images/**/*.svg')\n    .pipe(cond(prod,\n      gSvgmin(options), // minify SVG images under production\n      gWatch().pipe(gLivereload(server))) // use live reload in dev mode\n    )\n    .pipe(gulp.dest('www/images'))\n});\n```\n\nAlternatively, you can provide plugin functions instead of streams to\n  instanciate streams only when needed :\n\n```js\nvar cond = require('gulp-cond');\nvar prod = gulp.env.prod;\n\n// Images\ngulp.task('build_images', function() {\n  gulp.src('assets/images/**/*.svg')\n    .pipe(cond(prod,\n      gSvgmin.bind(null, options), // minify SVG images under production\n      function () { // use live reload in dev mode\n        return gWatch().pipe(gLivereload(server));\n      })\n    )\n    .pipe(gulp.dest('www/images'))\n});\n```\n\n## API\n\n### cond(condition, expr1, expr2)\n\n#### condition\nType: `Boolean` or `Function`\n\nRequired. A value or a function providing a value. If the value is truthy, expr1\n will be used, else, expr2 will be use if provided.\n\n#### expr1\nType: `Stream` or `Function`\n\nRequired. A stream or a function providing a stream.\n\n#### expr2\nType: `Stream` or `Function`\nDefault value: `Stream.PassThrough`\n\nA stream or a function providing a stream.\n\n## Stats\n\n[![NPM](https://nodei.co/npm/gulp-cond.png?downloads=true&stars=true)](https://nodei.co/npm/gulp-iconfont/)\n[![NPM](https://nodei.co/npm-dl/gulp-cond.png)](https://nodei.co/npm/gulp-iconfont/)\n\n### Contributing / Issues\n\nYou may want to contribute to this project, pull requests are welcome if you\n accept to publish under the MIT licence.\n\n",
  "readmeFilename": "README.md",
  "_id": "gulp-cond@1.0.0",
  "dist": {
    "shasum": "df2fa9a6ddf795d38ac9ee9a320e8e7a163dec36"
  },
  "_from": "gulp-cond@^1.0.0",
  "_resolved": "https://registry.npmjs.org/gulp-cond/-/gulp-cond-1.0.0.tgz"
}
