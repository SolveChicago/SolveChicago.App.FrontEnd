{
  "name": "gulp-nunjucks-render",
  "version": "2.0.0",
  "description": "Render Nunjucks templates with data",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/carlosl/gulp-nunjucks-render"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "files": [
    "index.js"
  ],
  "keywords": [
    "gulpplugin",
    "nunjucks",
    "template",
    "templating",
    "view",
    "render",
    "html",
    "javascript"
  ],
  "dependencies": {
    "gulp-util": "~2.2.0",
    "lodash": "^3.3.0",
    "nunjucks": "^2.0.0",
    "through2": "~0.4.0"
  },
  "devDependencies": {
    "mocha": "^2.1.0",
    "should": "^5.0.1"
  },
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/carlosl/gulp-nunjucks-render/issues"
  },
  "homepage": "https://github.com/carlosl/gulp-nunjucks-render",
  "_id": "gulp-nunjucks-render@2.0.0",
  "readme": "[![Build Status](https://travis-ci.org/carlosl/gulp-nunjucks-render.svg?branch=master)](https://travis-ci.org/carlosl/gulp-nunjucks-render)\n\n# [gulp](https://github.com/wearefractal/gulp)-nunjucks-render\n\n> Render [Nunjucks](http://jlongster.github.io/nunjucks/) templates\n\n*Issues with the output should be reported on the Nunjucks [issue tracker](https://github.com/jlongster/nunjucks/issues).*\n\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/package/gulp-nunjucks-render)\n\n```\nnpm install --save-dev gulp-nunjucks-render\n```\n\n\n## Example\n\n```js\nvar gulp = require('gulp');\nvar nunjucksRender = require('gulp-nunjucks-render');\n\ngulp.task('default', function () {\n  return gulp.src('src/templates/*.html')\n    .pipe(nunjucksRender({\n      path: ['src/templates/'] // String or Array\n    }))\n    .pipe(gulp.dest('dist'));\n});\n```\n\n## Example with gulp data\n\n```js\nvar gulp = require('gulp');\nvar nunjucksRender = require('gulp-nunjucks-render');\nvar data = require('gulp-data');\n\nfunction getDataForFile(file) {\n  return {\n    example: 'data loaded for ' + file.relative\n  };\n}\n\ngulp.task('default', function () {\n\treturn gulp.src('src/templates/*.html')\n    .pipe(data(getDataForFile))\n    .pipe(nunjucksRender({\n      path: 'src/templates'\n    }))\n    .pipe(gulp.dest('dist'));\n});\n```\n\n\n## API\n\n## Options\nPlugin accepts options object, which contain these by default:\n\n```js\nvar defaults = {\n  path: '.',\n  ext: '.html',\n  data: {},\n  inheritExtension: false,\n  envOptions: {\n    watch: false\n  },\n  manageEnv: null,\n  loaders: null\n};\n```\n\n* `path` - Relative path to templates\n* `ext` - Extension for compiled templates, pass null or empty string if yo don't want any extension\n* `data` - Data passed to template\n* `inheritExtension` - If true, uses same extension that is used for template\n* `envOptions` - These are options provided for nunjucks Environment. More info [here](https://mozilla.github.io/nunjucks/api.html#configure).\n* `manageEnv` - Hook for managing environment before compilation. Useful for adding custom filters, globals, etc. Example [below](#environment)\n* `loaders` - If provided, uses that as first parameter to Environment constructor. Otherwise, uses provided `path`. More info [here](https://mozilla.github.io/nunjucks/api.html#environment)\n\nFor more info about nunjucks functionality, check [https://mozilla.github.io/nunjucks/api.html](https://mozilla.github.io/nunjucks/api.html) and also a source code of this plugin.\n\n\n### Data\nU can pass data as option, or you can use gulp-data like in example above.\n\n```js\nnunjucksRender({data: {\n  css_path: 'http://company.com/css/'\n}});\n```\n\nFor the following template\n```html\n<link rel=\"stylesheet\" href=\"{{ css_path }}test.css\" />\n```\n\nWould render\n```html\n<link rel=\"stylesheet\" href=\"http://company.com/css/test.css\" />\n```\n\n### Environment\n\nIf you want to manage environment (add custom filters or globals), you can to that with `manageEnv` function hook:\n\n```javascript\nvar manageEnvironment = function(environment) {\n  environment.addFilter('slug', function(str) {\n    return str && str.replace(/\\s/g, '-', str).toLowerCase();\n  });\n\n  environment.addGlobal('globalTitle', 'My global title')\n}\n\nnunjucksRender({\n  manageEnv: manageEnvironment\n}):\n```\n\nAfter adding that, you can use them in template like this:\n\n```html\n<h1>{{ globalTitle }}</h1>\n<h3>{{ 'My important post'|slug }}</h3>\n```\n\nAnd get this result:\n\n```html\n<h1>My global title</h1>\n<h3>my-important-post</h3>\n```\n\n## License\n\nMIT Â© [Carlos G. Limardo](http://limardo.org) and [Kristijan Husak](http://kristijanhusak.com)\n\n## Shout-outs\n\n[Sindre Sorhus](http://sindresorhus.com/) who wrote the original [gulp-nunjucks](https://www.npmjs.org/package/gulp-nunjucks) for precompiling Nunjucks templates. I updated his to render instead of precompile.\n\n[kristijanhusak](http://github.com/kristijanhusak) for bug fixes and help with maintenance.\n",
  "dist": {
    "shasum": "f71120010fc214b7206f1d562d660cd57caab3c6"
  },
  "_from": "gulp-nunjucks-render@2.0.0",
  "_resolved": "https://registry.npmjs.org/gulp-nunjucks-render/-/gulp-nunjucks-render-2.0.0.tgz"
}
